package org.jboss.arquillian.container.android.managed.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jboss.arquillian.android.spi.event.AndroidVirtualDeviceDeleted;
import org.jboss.arquillian.container.android.api.AndroidEmulatorEvent;
import org.jboss.arquillian.container.android.api.AndroidExecutionException;
import org.jboss.arquillian.container.android.managed.configuration.AndroidManagedContainerConfiguration;
import org.jboss.arquillian.container.android.managed.configuration.AndroidSDK;
import org.jboss.arquillian.container.spi.event.container.AfterStop;
import org.jboss.arquillian.core.api.Event;
import org.jboss.arquillian.core.api.Instance;
import org.jboss.arquillian.core.api.annotation.Inject;
import org.jboss.arquillian.core.api.annotation.Observes;

/**
 * <p>
 * Deletes Andorid AVD in case we autogenerated the emulator
 * </p>
 *
 * Observes:
 * <ul>
 * <li>{@link AfterStop}</li>
 * </ul>
 *
 * Fires:
 * <ul>
 * <li>{@link AndroidVirtualDeviceDeleted}</li>
 * </ul>
 *
 * @author <a href="mailto:smikloso@redhat.com">Stefan Miklosovic</a>
 */
public class AndroidEmulatorDelete implements AndroidEmulatorEvent {

    private static final Logger logger = Logger.getLogger(AndroidEmulatorDelete.class.getName());

    @Inject
    private Instance<AndroidSDK> androidSDK;

    @Inject
    private Event<AndroidVirtualDeviceDeleted> afterAndroidVirtualDeviceDeleted;

    public void deleteEmulator(@Observes AfterStop event, AndroidManagedContainerConfiguration configuration,
            ProcessExecutor executor) {

        if (!configuration.isAVDGenerated()) {
            return;
        }

        try {
            Process android = constructDeleteProcess(executor, androidSDK.get(), configuration.getAvdName());
            if (deleteAVD(android, executor) == 0) {
                logger.log(Level.INFO, "Android Virtual Device {0} deleted", configuration.getAvdName());
            } else {
                logger.log(Level.INFO, "Unable to delete Android Virtual Device {0}", configuration.getAvdName());
            }
        } catch (AndroidExecutionException ex) {
            logger.log(Level.INFO, "Unable to delete AVD", ex);
        }
        afterAndroidVirtualDeviceDeleted.fire(new AndroidVirtualDeviceDeleted(configuration.getAvdName()));
    }

    private int deleteAVD(final Process android, final ProcessExecutor executor) throws AndroidExecutionException {
        try {
            int deleted = executor.submit(new Callable<Integer>() {

                @Override
                public Integer call() throws Exception {
                    return android.waitFor();
                }
            }).get();

            return deleted;
        } catch (Exception ex) {
            throw new AndroidExecutionException(ex);
        }
    }

    private Process constructDeleteProcess(ProcessExecutor executor, AndroidSDK androidSDK, String avdName)
            throws AndroidExecutionException {

        List<String> androidCommand = new ArrayList<String>(
                Arrays.asList(androidSDK.getAndroidPath(), "delete", "avd", "-n", avdName));

        try {
            return executor.spawn(androidCommand);
        } catch (InterruptedException e) {
            throw new AndroidExecutionException(e, "Unable to delete AVD {0}.", avdName);
        } catch (ExecutionException e) {
            throw new AndroidExecutionException(e, "Unable to delete AVD {0}.", avdName);
        }
    }

}
